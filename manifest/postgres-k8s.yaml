# --- 1. Secret para la contraseña de PostgreSQL ---
apiVersion: v1
kind: Secret
metadata:
  name: postgres-credentials
type: Opaque
stringData:
  POSTGRES_USER: admincar
  POSTGRES_PASSWORD: 1839%criptoDB 
  POSTGRES_DB: criptodb

---
# --- 2. PersistentVolumeClaim (PVC) para los datos de PostgreSQL ---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi # <--- Ajusta esto si necesitas más o menos espacio
  storageClassName: standard # Minikube usa 'standard' por defecto

---
# --- 3. Deployment para el servidor PostgreSQL (con ConfigMap para configuración) ---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres-deployment
  labels:
    app: postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:16-alpine
        ports:
        - containerPort: 5432
        envFrom:
        - secretRef:
            name: postgres-credentials
        volumeMounts: # <--- MONTAR VOLÚMENES DEL PVC Y CONFIGMAP
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data # Aquí se guardan los datos de la DB
        - name: postgres-config-volume # Montaje del ConfigMap para los archivos de configuración
          mountPath: /etc/postgresql/postgresql.conf # Monta postgresql.conf
          subPath: postgresql.conf # Especifica que es el archivo 'postgresql.conf' del ConfigMap
        - name: postgres-config-volume # Montaje del ConfigMap para pg_hba.conf
          mountPath: /etc/postgresql/pg_hba.conf # Monta pg_hba.conf
          subPath: pg_hba.conf # Especifica que es el archivo 'pg_hba.conf' del ConfigMap
        readinessProbe: # Para que Kubernetes sepa cuándo está listo para recibir tráfico
          exec:
            command: ["pg_isready", "-U", "admincar", "-d", "criptodb"]
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 5
        livenessProbe: # Para que Kubernetes sepa cuándo la app está funcionando (o muerta)
          exec:
            command: ["pg_isready", "-U", "admincar", "-d", "criptodb"]
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
      volumes: # <--- DEFINICIÓN DE LOS VOLÚMENES UTILIZADOS
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: postgres-pvc
      - name: postgres-config-volume # Definición del volumen que proviene del ConfigMap
        configMap:
          name: postgres-config # Nombre del ConfigMap que debes crear
          items:
            - key: postgresql.conf
              path: postgresql.conf
            - key: pg_hba.conf
              path: pg_hba.conf

---
# --- 4. Service para exponer PostgreSQL dentro del clúster (ClusterIP) ---
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  labels:
    app: postgres
spec:
  selector:
    app: postgres
  ports:
    - protocol: TCP
      port: 5432 # Puerto del servicio
      targetPort: 5432 # Puerto del contenedor